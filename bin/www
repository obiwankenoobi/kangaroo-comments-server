#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");

const fetchComments = require("../api/fetchCommentsFunc");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3011");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require("socket.io")(server);

// creating connection listener to the socket
io.on("connection", socket => {
  console.log("user connected");
  // adding event listener:
  // on `comment` event (first arg (coming from the client)) invoke the callback which use <sockets.emit> to send the data back to the client
  socket.on("comment", async pageData => {
    console.log("comment");
    const { siteName, pageName } = pageData; // getting the data from the <emit> method from client to search by
    const response = await fetchComments(siteName, pageName); // getting the response
    data = {
      response: response,
      siteName: siteName,
      pageName: pageName
    };
    io.sockets.emit("comment", data); // <== sending the data back to the client
  });
  socket.on("disconnect", () => console.log("user disconected")); // when user done invoke the callback
});
app.set("socketio", io);

/**
 ** setting the app object inside the app object
 ** to later be abale to use app.set in /auth/google route
 **/
app.set("app", app);
// console.log("this is io", io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
