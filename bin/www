#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

let fetchComments = require('../api/fetchCommentsFunc');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3011');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);
let io = require('socket.io')(server);

// creating connection listener to the socket
io.on('connection', socket => {
	console.log('user connected');
  
	// on `comment` event (first arg) invoke the callback which use <sockets.emit> to send the data back to the client  
	socket.on('comment', async (pageData) => {
    console.log('comment')
		const {siteName , pageName} = pageData; // getting the data from the <emit> method to search by
		const response = await fetchComments(siteName, pageName); // getting the response
		data = {
			response:response,
			siteName:siteName,
			pageName:pageName
		};
		io.sockets.emit('comment', data);
	}); 
  
	socket.on('disconnect', () => console.log('user disconected')); // when user done invoke the callback
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
